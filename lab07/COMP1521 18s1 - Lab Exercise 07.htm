<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<!-- saved from url=(0062)https://cgi.cse.unsw.edu.au/~cs1521/18s1/labs/week07/index.php -->
<html><head><meta http-equiv="Content-Type" content="text/html; charset=windows-1252">
<title>COMP1521 18s1 - Lab Exercise 07</title>
<link rel="stylesheet" type="text/css" href="./COMP1521 18s1 - Lab Exercise 07_files/course.css"><style type="text/css">.MathJax_Hover_Frame {border-radius: .25em; -webkit-border-radius: .25em; -moz-border-radius: .25em; -khtml-border-radius: .25em; box-shadow: 0px 0px 15px #83A; -webkit-box-shadow: 0px 0px 15px #83A; -moz-box-shadow: 0px 0px 15px #83A; -khtml-box-shadow: 0px 0px 15px #83A; border: 1px solid #A6D ! important; display: inline-block; position: absolute}
.MathJax_Menu_Button .MathJax_Hover_Arrow {position: absolute; cursor: pointer; display: inline-block; border: 2px solid #AAA; border-radius: 4px; -webkit-border-radius: 4px; -moz-border-radius: 4px; -khtml-border-radius: 4px; font-family: 'Courier New',Courier; font-size: 9px; color: #F0F0F0}
.MathJax_Menu_Button .MathJax_Hover_Arrow span {display: block; background-color: #AAA; border: 1px solid; border-radius: 3px; line-height: 0; padding: 4px}
.MathJax_Hover_Arrow:hover {color: white!important; border: 2px solid #CCC!important}
.MathJax_Hover_Arrow:hover span {background-color: #CCC!important}
</style><style type="text/css">#MathJax_About {position: fixed; left: 50%; width: auto; text-align: center; border: 3px outset; padding: 1em 2em; background-color: #DDDDDD; color: black; cursor: default; font-family: message-box; font-size: 120%; font-style: normal; text-indent: 0; text-transform: none; line-height: normal; letter-spacing: normal; word-spacing: normal; word-wrap: normal; white-space: nowrap; float: none; z-index: 201; border-radius: 15px; -webkit-border-radius: 15px; -moz-border-radius: 15px; -khtml-border-radius: 15px; box-shadow: 0px 10px 20px #808080; -webkit-box-shadow: 0px 10px 20px #808080; -moz-box-shadow: 0px 10px 20px #808080; -khtml-box-shadow: 0px 10px 20px #808080; filter: progid:DXImageTransform.Microsoft.dropshadow(OffX=2, OffY=2, Color='gray', Positive='true')}
#MathJax_About.MathJax_MousePost {outline: none}
.MathJax_Menu {position: absolute; background-color: white; color: black; width: auto; padding: 5px 0px; border: 1px solid #CCCCCC; margin: 0; cursor: default; font: menu; text-align: left; text-indent: 0; text-transform: none; line-height: normal; letter-spacing: normal; word-spacing: normal; word-wrap: normal; white-space: nowrap; float: none; z-index: 201; border-radius: 5px; -webkit-border-radius: 5px; -moz-border-radius: 5px; -khtml-border-radius: 5px; box-shadow: 0px 10px 20px #808080; -webkit-box-shadow: 0px 10px 20px #808080; -moz-box-shadow: 0px 10px 20px #808080; -khtml-box-shadow: 0px 10px 20px #808080; filter: progid:DXImageTransform.Microsoft.dropshadow(OffX=2, OffY=2, Color='gray', Positive='true')}
.MathJax_MenuItem {padding: 1px 2em; background: transparent}
.MathJax_MenuArrow {position: absolute; right: .5em; padding-top: .25em; color: #666666; font-size: .75em}
.MathJax_MenuActive .MathJax_MenuArrow {color: white}
.MathJax_MenuArrow.RTL {left: .5em; right: auto}
.MathJax_MenuCheck {position: absolute; left: .7em}
.MathJax_MenuCheck.RTL {right: .7em; left: auto}
.MathJax_MenuRadioCheck {position: absolute; left: .7em}
.MathJax_MenuRadioCheck.RTL {right: .7em; left: auto}
.MathJax_MenuLabel {padding: 1px 2em 3px 1.33em; font-style: italic}
.MathJax_MenuRule {border-top: 1px solid #DDDDDD; margin: 4px 3px}
.MathJax_MenuDisabled {color: GrayText}
.MathJax_MenuActive {background-color: #606872; color: white}
.MathJax_MenuDisabled:focus, .MathJax_MenuLabel:focus {background-color: #E8E8E8}
.MathJax_ContextMenu:focus {outline: none}
.MathJax_ContextMenu .MathJax_MenuItem:focus {outline: none}
#MathJax_AboutClose {top: .2em; right: .2em}
.MathJax_Menu .MathJax_MenuClose {top: -10px; left: -10px}
.MathJax_MenuClose {position: absolute; cursor: pointer; display: inline-block; border: 2px solid #AAA; border-radius: 18px; -webkit-border-radius: 18px; -moz-border-radius: 18px; -khtml-border-radius: 18px; font-family: 'Courier New',Courier; font-size: 24px; color: #F0F0F0}
.MathJax_MenuClose span {display: block; background-color: #AAA; border: 1.5px solid; border-radius: 18px; -webkit-border-radius: 18px; -moz-border-radius: 18px; -khtml-border-radius: 18px; line-height: 0; padding: 8px 0 6px}
.MathJax_MenuClose:hover {color: white!important; border: 2px solid #CCC!important}
.MathJax_MenuClose:hover span {background-color: #CCC!important}
.MathJax_MenuClose:hover:focus {outline: none}
</style><style type="text/css">.MathJax_Preview .MJXf-math {color: inherit!important}
</style><style type="text/css">.MJX_Assistive_MathML {position: absolute!important; top: 0; left: 0; clip: rect(1px, 1px, 1px, 1px); padding: 1px 0 0 0!important; border: 0!important; height: 1px!important; width: 1px!important; overflow: hidden!important; display: block!important; -webkit-touch-callout: none; -webkit-user-select: none; -khtml-user-select: none; -moz-user-select: none; -ms-user-select: none; user-select: none}
.MJX_Assistive_MathML.MJX_Assistive_MathML_Block {width: 100%!important}
</style><style type="text/css">#MathJax_Zoom {position: absolute; background-color: #F0F0F0; overflow: auto; display: block; z-index: 301; padding: .5em; border: 1px solid black; margin: 0; font-weight: normal; font-style: normal; text-align: left; text-indent: 0; text-transform: none; line-height: normal; letter-spacing: normal; word-spacing: normal; word-wrap: normal; white-space: nowrap; float: none; -webkit-box-sizing: content-box; -moz-box-sizing: content-box; box-sizing: content-box; box-shadow: 5px 5px 15px #AAAAAA; -webkit-box-shadow: 5px 5px 15px #AAAAAA; -moz-box-shadow: 5px 5px 15px #AAAAAA; -khtml-box-shadow: 5px 5px 15px #AAAAAA; filter: progid:DXImageTransform.Microsoft.dropshadow(OffX=2, OffY=2, Color='gray', Positive='true')}
#MathJax_ZoomOverlay {position: absolute; left: 0; top: 0; z-index: 300; display: inline-block; width: 100%; height: 100%; border: 0; padding: 0; margin: 0; background-color: white; opacity: 0; filter: alpha(opacity=0)}
#MathJax_ZoomFrame {position: relative; display: inline-block; height: 0; width: 0}
#MathJax_ZoomEventTrap {position: absolute; left: 0; top: 0; z-index: 302; display: inline-block; border: 0; padding: 0; margin: 0; background-color: white; opacity: 0; filter: alpha(opacity=0)}
</style><style type="text/css">.MathJax_Preview {color: #888}
#MathJax_Message {position: fixed; left: 1em; bottom: 1.5em; background-color: #E6E6E6; border: 1px solid #959595; margin: 0px; padding: 2px 8px; z-index: 102; color: black; font-size: 80%; width: auto; white-space: nowrap}
#MathJax_MSIE_Frame {position: absolute; top: 0; left: 0; width: 0px; z-index: 101; border: 0px; margin: 0px; padding: 0px}
.MathJax_Error {color: #CC0000; font-style: italic}
</style><style type="text/css">.MJXp-script {font-size: .8em}
.MJXp-right {-webkit-transform-origin: right; -moz-transform-origin: right; -ms-transform-origin: right; -o-transform-origin: right; transform-origin: right}
.MJXp-bold {font-weight: bold}
.MJXp-italic {font-style: italic}
.MJXp-scr {font-family: MathJax_Script,'Times New Roman',Times,STIXGeneral,serif}
.MJXp-frak {font-family: MathJax_Fraktur,'Times New Roman',Times,STIXGeneral,serif}
.MJXp-sf {font-family: MathJax_SansSerif,'Times New Roman',Times,STIXGeneral,serif}
.MJXp-cal {font-family: MathJax_Caligraphic,'Times New Roman',Times,STIXGeneral,serif}
.MJXp-mono {font-family: MathJax_Typewriter,'Times New Roman',Times,STIXGeneral,serif}
.MJXp-largeop {font-size: 150%}
.MJXp-largeop.MJXp-int {vertical-align: -.2em}
.MJXp-math {display: inline-block; line-height: 1.2; text-indent: 0; font-family: 'Times New Roman',Times,STIXGeneral,serif; white-space: nowrap; border-collapse: collapse}
.MJXp-display {display: block; text-align: center; margin: 1em 0}
.MJXp-math span {display: inline-block}
.MJXp-box {display: block!important; text-align: center}
.MJXp-box:after {content: " "}
.MJXp-rule {display: block!important; margin-top: .1em}
.MJXp-char {display: block!important}
.MJXp-mo {margin: 0 .15em}
.MJXp-mfrac {margin: 0 .125em; vertical-align: .25em}
.MJXp-denom {display: inline-table!important; width: 100%}
.MJXp-denom > * {display: table-row!important}
.MJXp-surd {vertical-align: top}
.MJXp-surd > * {display: block!important}
.MJXp-script-box > *  {display: table!important; height: 50%}
.MJXp-script-box > * > * {display: table-cell!important; vertical-align: top}
.MJXp-script-box > *:last-child > * {vertical-align: bottom}
.MJXp-script-box > * > * > * {display: block!important}
.MJXp-mphantom {visibility: hidden}
.MJXp-munderover {display: inline-table!important}
.MJXp-over {display: inline-block!important; text-align: center}
.MJXp-over > * {display: block!important}
.MJXp-munderover > * {display: table-row!important}
.MJXp-mtable {vertical-align: .25em; margin: 0 .125em}
.MJXp-mtable > * {display: inline-table!important; vertical-align: middle}
.MJXp-mtr {display: table-row!important}
.MJXp-mtd {display: table-cell!important; text-align: center; padding: .5em 0 0 .5em}
.MJXp-mtr > .MJXp-mtd:first-child {padding-left: 0}
.MJXp-mtr:first-child > .MJXp-mtd {padding-top: 0}
.MJXp-mlabeledtr {display: table-row!important}
.MJXp-mlabeledtr > .MJXp-mtd:first-child {padding-left: 0}
.MJXp-mlabeledtr:first-child > .MJXp-mtd {padding-top: 0}
.MJXp-merror {background-color: #FFFF88; color: #CC0000; border: 1px solid #CC0000; padding: 1px 3px; font-style: normal; font-size: 90%}
.MJXp-scale0 {-webkit-transform: scaleX(.0); -moz-transform: scaleX(.0); -ms-transform: scaleX(.0); -o-transform: scaleX(.0); transform: scaleX(.0)}
.MJXp-scale1 {-webkit-transform: scaleX(.1); -moz-transform: scaleX(.1); -ms-transform: scaleX(.1); -o-transform: scaleX(.1); transform: scaleX(.1)}
.MJXp-scale2 {-webkit-transform: scaleX(.2); -moz-transform: scaleX(.2); -ms-transform: scaleX(.2); -o-transform: scaleX(.2); transform: scaleX(.2)}
.MJXp-scale3 {-webkit-transform: scaleX(.3); -moz-transform: scaleX(.3); -ms-transform: scaleX(.3); -o-transform: scaleX(.3); transform: scaleX(.3)}
.MJXp-scale4 {-webkit-transform: scaleX(.4); -moz-transform: scaleX(.4); -ms-transform: scaleX(.4); -o-transform: scaleX(.4); transform: scaleX(.4)}
.MJXp-scale5 {-webkit-transform: scaleX(.5); -moz-transform: scaleX(.5); -ms-transform: scaleX(.5); -o-transform: scaleX(.5); transform: scaleX(.5)}
.MJXp-scale6 {-webkit-transform: scaleX(.6); -moz-transform: scaleX(.6); -ms-transform: scaleX(.6); -o-transform: scaleX(.6); transform: scaleX(.6)}
.MJXp-scale7 {-webkit-transform: scaleX(.7); -moz-transform: scaleX(.7); -ms-transform: scaleX(.7); -o-transform: scaleX(.7); transform: scaleX(.7)}
.MJXp-scale8 {-webkit-transform: scaleX(.8); -moz-transform: scaleX(.8); -ms-transform: scaleX(.8); -o-transform: scaleX(.8); transform: scaleX(.8)}
.MJXp-scale9 {-webkit-transform: scaleX(.9); -moz-transform: scaleX(.9); -ms-transform: scaleX(.9); -o-transform: scaleX(.9); transform: scaleX(.9)}
.MathJax_PHTML .noError {vertical-align: ; font-size: 90%; text-align: left; color: black; padding: 1px 3px; border: 1px solid}
</style></head>
<body><div id="MathJax_Message" style="display: none;"></div>
<div align="center">
<table width="100%" border="0">
<tbody><tr valign="top">
<td align="left" width="25%">
  <span class="tiny"><a href="https://www.cse.unsw.edu.au/~cs1521/18s1/index.php">COMP1521 18s1</a></span>
</td>
<td align="center" width="50%">
  <span class="heading">Lab Exercise 07</span><br>
  <span class="subheading">Virtual Memory Simulation</span>
</td>
<td align="right" width="25%">
  <span class="tiny"><a href="https://www.cse.unsw.edu.au/~cs1521/18s1/index.php">Computer System Fundamentals</a></span>
</td>
</tr></tbody></table>
</div>
<h2>Objectives</h2>
<ul>
<li> to implement a simulation in C
</li><li> to investigate virtual memory page replacement
</li></ul>

<h2>Admin</h2>
<table border="0" cellpadding="4">
<tbody><tr><td><b>Grades</b></td><td>A+=outstanding, A=very good, B=adequate, C=sub-standard, D=hopeless</td></tr>
<tr><td><b>Demo</b></td><td>in the Week07 Lab or at the start of the Week08 Lab</td></tr>
<tr><td><b>Submit</b></td><td><tt>give cs1521 lab07 vmsim.c</tt> &nbsp; or via WebCMS</td></tr>
<tr><td><b>Deadline</b></td><td>must be submitted by 11:59pm Sunday 22 April</td></tr>
</tbody></table>
<p><small>
Note: you need to do something <i>truly</i> outstanding, above and beyond
the "call of duty" to get A+.
Doing the exercise well and correctly as specified will get you an A grade.
An A grade gets you full marks; an A+ grade gives a small bonus.
</small></p>

<h2>Background</h2>
<p>
<b>Virtual memory</b> (VM) is a technique for managing process memory and
physical memory
by (a) partitioning process memory and physical memory into fixed-size
<b>pages</b>, (b) loading process pages into memory on demand, and
(c) recording where they are loaded in a <b>page table</b> for each process.
Pages in physical memory are often called <em>frames</em>.
A page table is an array of <b>page table entries</b> (PTEs).
Each PTE tells (a) where the process page occurs in the physical memory,
(b) whether it has been modified since it was loaded, and (c) when it was
last accessed (either read or written).
</p>
<p>
Consider the following simple VM setup, where the process has 6 pages and
the physical memory has 4 frames.
When the process starts all PTEs are empty, because no process pages have
yet been loaded into memory.
The following diagram shows the state at the start of the process:
</p>
<center><img src="./COMP1521 18s1 - Lab Exercise 07_files/vmstat0.png"></center>
<p>
The first column in the page table gives the status of each page, which is one of:
</p>
<ul>
<li> <tt>'-'</tt> if the page is not currently loaded
</li><li> <tt>'L'</tt> if the page is loaded into memory but not modified
</li><li> <tt>'M'</tt> if the page is loaded and has been modified since loading
</li></ul>
<p>
The second column in the page table is either <tt>'-'</tt> (if the page
is not loaded) or is the number of the frame where the page is loaded.
The third column is a timestamp indicating when the page was last read
or written. Timestamps are simply integers starting from 0 and increasing
by one each time an instruction is executed.
</p>
<p>
Consider the scenario where the first thing that the process does is
to access its stack. It needs to have the startup code loaded (assume
it's in page 0) and the stack data loaded (assume it's in page 5).
The next diagram shows the
state after this has happened. We assume that the code is loaded first
because it contains the instructions to access the stack.
</p>
<center><img src="./COMP1521 18s1 - Lab Exercise 07_files/vmstat1.png"></center>
<p>
Note that the first page loaded is placed in the first free memory frame.
The second page loaded is placed in the second memory frame. And so on.
If the memory was large enough to hold all of the process's pages, they
would be loaded one-by-one as required, and then stay in the memory until
the process was finished.
</p>
<p>
Now consider the state later on in the computation, where the process
has accessed a number of its pages and they are loaded in memory as
follows:
</p>
<center><img src="./COMP1521 18s1 - Lab Exercise 07_files/vmstat2.png"></center>
<p>
If the next instruction references an address from page 3,
then we have a problem. All of the memory frames are in use,
and so we need to replace the contents of one of the frames
to handle the new address reference (i.e. we need to evict
a page from a frame and replace the contents of the frame
by the page which has just been referenced).
If the page being evicted has been modified, it will need to
be written to disk before being replaced in memory.
</p>
<p>
The following diagram shows the scenario after page 3 was
loaded. It replaced page 1 in frame 3.
</p>
<center><img src="./COMP1521 18s1 - Lab Exercise 07_files/vmstat3.png"></center>
<p>
How did we decide to replace page 1 rather than e.g. page 5?
We used the Least Recently Used strategy.
This involves scanning the page table and finding the loaded
page with the oldest access timestamp. In the above example,
this was page 1 which was last accessed at time t=10. All of
the other pages were accessed more recently than this.
</p>

<h2>Setting Up</h2>
<p>
Create a directory for this lab; let's call it <i>Lab07Dir</i>.
</p>
<p>
Change into your <i>Lab07Dir</i> directory and run the following command:
</p>
<pre>$ <b>unzip <a href="https://www.cse.unsw.edu.au/~cs1521/18s1/labs/week07/lab07.zip">/home/cs1521/web/18s1/labs/week07/lab07.zip</a></b>
</pre>
<p>
If you're working at home, download <tt>lab07.zip</tt> by right-clicking on the above link
and then run the above command on your local machine.
</p>
<p>
If you've done the above correctly, you should now find the following files in the directory:
</p>
<table border="0" cellpadding="4">
<tbody><tr><td><tt>vmsim.c</tt></td><td>a partially complete virtual memory simulator</td></tr>
<tr><td><tt>Makefile</tt></td><td>compiles the <tt>vmsim</tt> program</td></tr>
<tr><td><tt>tests/</tt></td><td>a directory containing test cases</td></tr>
</tbody></table>
<p>
Note that, as supplied, the program will compile, but will not behave
as we want. It will simply complain that any address you supply is
invalid.
</p>

<h2>Exercise</h2>
<p>
The simulation program involves two core data structures:
</p>
<ul>
<li> <tt>PageTable</tt>: an array of <tt>nPages</tt> page table entries (PTEs)
</li><li> <tt>MemFrames</tt>: an array of <tt>nFrames</tt> integers, where each entry is -1 (nothing loaded) or a page number
</li></ul>
<p>
The simulation assumes that there is a single process whose
page table entries are maintained in <tt>PageTable</tt>, and
a memory with <tt>nFrames</tt> frames.
</p>
<p>
What the <tt>main()</tt> function does is roughly as follows:
</p>
<pre>main:
   set nPages from argv[1], set nFrames from argv[2]
   initialise the clock, PageTable and MemFrames
   for each line of input in stdin {
      extract the operation and virtual address
      convert the virtual address to a physical address
      display the new state of all of the data structures
      tick the clock
   }
</pre>
<p>
It performs the above until it either runs out of input or until
it encounters an invalid address (outside the range 0..MAX-1
where <nobr>MAX = nPages * PAGESIZE</nobr>).
</p>
<p>
You should read the definitions at the start of the <tt>vmsim.c</tt>
file, then the <tt>main()</tt> function (whose operation is described above).
After that, look at the helper functions <tt>initPageTable()</tt>,
<tt>initMemFrames</tt> and <tt>showState()</tt> which will give a
clearer idea on how the data structures work.
Once you've done that, your goal for this lab is to complete
the <tt>physicalAddress()</tt> function, which should behave as
follows:
</p>
<pre>physicalAddress(vAddr, action):
   extract page# and offset from vAddr
   if the page# is not valid, return -1
   if the page is already loaded {
      set the Modified flag if action is a write
      update the access time to the current clock tick
      use the frame number and offset to compute a physical address
   }
   else {
      look for an unused frame
      if find one, use that
      else {
         // need to replace a currently loaded frame, so
         increment the nReplaces counter
         find the Least Recently Used loaded page
         increment the nWrites counter if modified
         set its PageTable entry to indicate "no longer loaded"
      // should now have a frame# to use
      increment the nLoads counter
      set PageTable entry for the new page
         (flags, frame#, accesstime=current clock tick)
      use the frame number and offset to compute a physical address
   }
   return the physical address
</pre>
<p>
The input file for the simulator is a trace of memory accesses,
one access per line, where each line contains an action (<tt>'R'</tt>
or <tt>'W'</tt>) and a virtual (process) address (in decimal).
For example:
</p>
<pre>R 1000
W 2000
R 1004
W 2004
...
</pre>
<p>
which indicates a program that first reads a value from virtual address
1000, then writes a value to virtual address 2000, then reads a value
from virtual address 1004, the writes a value to virtual address 2004.
</p>
<p>
The output of the simulator is a sequence of states, where each
state is preceded by the address that was last processed.
For example:
</p>
<pre>@ t=7, read from pA=2 (vA=12290)

PageTable (Stat,Acc,Frame)
[ 0]  -, -1, -1
[ 1]  M,  3,  1 @ 4096
[ 2]  L,  5,  2 @ 8192
[ 3]  L,  7,  0 @ 0
[ 4]  -, -1, -1
MemFrames
[ 0]  3 @ 0
[ 1]  1 @ 4096
[ 2]  2 @ 8192
</pre>
<p>
shows that at time t=7, the virtual address 12290 was accessed.
After this, the page table shows that pages 1, 2, 3 are loaded in
memory. Page 1 has been modified since it was loaded,
while pages 2 and 3 are unmodified.
The second column in the page table shows the last accessed time
of each loaded page (or -1 if it's not loaded).
The third column shows which frame the page is contained in;
while the value for the corresponding frame shows which page
is loaded in that frame.
</p>
<p>
The final line of the output shows the values of the three
counters after the program has finished accessing addresses.
</p>
<p>
You can see several examples of the expected output from the program
in the <tt>tests/</tt> directory.
Tests are in pairs, e.g. the file <tt>05.sh</tt> shows the command
line parameters that were used to run the test, while <tt>05.exp</tt>
shows the expected output.
You can use these tests in "the usual way":
</p>
<pre>$ <b>~cs1521/bin/check vmsim.c</b>
</pre>
<p>
Notes:
</p>
<ul>
<li> pages are 4KB = 2<sup>12</sup> bytes
</li><li> all address values are in decimal (not hexadecimal) </li>
<li> no replacements ever occur if nFrames &#8805; nPages </li>
<li> if the Modified bit is set, the Loaded bit will also always be set </li>
<li> if the Loaded bit is set, the Modified bit not necessarily be set </li>
<li> you can force different behaviours by changing the command-line parameters </li>
</ul>

<h2>Challenges</h2>
<p>
Add a page replacement strategy that uses a "usefulness" measure that
incorporates whether a page has been modified.
Modified pages are not replaced if there are any unmodified pages that
can be swapped out.
If there are unmodified pages, choose the least recently used
unmodified page.
If all pages have been modified, choose the least recently used 
modified page.
</p>

<h2>Submission</h2>
<p>
You need to submit the file: <tt>vmsim.c</tt>.
You can submit this via the command line using <tt>give</tt> or you can
submit it from within WebCMS. After submitting the code, show your tutor,
who'll give you feedback on your work and award a grade.
</p>
<p>
Have fun, <i>jas</i>
</p>


<script type="text/javascript" src="./COMP1521 18s1 - Lab Exercise 07_files/MathJax.js"></script><script id="texAllTheThingsPageScript" type="text/javascript" src="chrome-extension://cbimabofgmfdkicghcadidpemeenbffn/js/pageScript.js" inlinemath="[[&quot;$&quot;,&quot;$&quot;],[&quot;[;&quot;,&quot;;]&quot;]]" displaymath="[[&quot;$$&quot;,&quot;$$&quot;],[&quot;\\[&quot;,&quot;\\]&quot;]]"></script></body></html>